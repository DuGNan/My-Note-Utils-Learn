package com.learn.item1;

/**
 * @author xrb
 * @create 2020-01-20 22:49
 * 栈指令集架构
 *
 * Java编译器输入的指令流基本上是一种基于栈的指令集架构，另外一种则是基于寄存器的指令集架构。
 * 执行指令的时候，需要两部分，一部分是地址，另一部分是操作数。
 * 零地址指令：只有操作数，没有地址。
 * 一地址指令：一个地址，另一个是操作数地址同时也是结果地址。
 * 二地址指令：第一个操作数地址，第二个操作数的地址和结果地址。
 * 三地址指令：第一操作数地址，第二操作数地址、结果地址，还有一个是下一条指令地址。
 *
 * 基于栈式架构的特点
 * 1、设计和实现更加简单，适用于资源受限制的系统。（机顶盒，打印机，嵌入式设备）
 * 2、避开了寄存器的分配难题：使用零地址指令指令分配方式。（栈只有对栈顶数据的操作，不需要地址）
 * 3、指令流中的指令大部分是零地址指令，其执行过程依赖于操作栈。指令集更小，编译器容易实现。
 * 4、不需要硬件支持，可移植性好，更好实现跨平台。
 * 基于寄存器架构的特点
 * 1、典型的引用是x86的二进制指令集，比如传统的PC以及android的Davlik虚拟机
 * 2、指令集架构则是完全依赖于硬件，可抑制性差。
 * 3、性能优秀和高效的执行效率。
 * 4、花费更少的指令去完成一项操作。
 * 5、在大部分情况下，基于寄存器架构的指令集往往都以一地址指令，二地址指令和三地址指令为主，而基于栈式架构的指令集往往却是以零地址指令为主。
 *
 *
 * 总结：由于跨平台性质的设计，Java的指令都是根据栈来设计的。
 * 不同平台的CPU架构不同，所以不能设计为基于寄存器的。
 * 优点就是跨平台，指令集小，编译容易实现。
 * 缺点是性能下降，实现同样的功能需要更多的指令。
 */

public class StackStructureTest {
    public static void main(String[] args) {
        int i = 1;
        int j = 2;
        int k = i + j;

        /**
         * Code:
         *       stack=2, locals=4, args_size=1
         *          0: iconst_1
         *          1: istore_1
         *          2: iconst_2
         *          3: istore_2
         *          4: iload_1
         *          5: iload_2
         *          6: iadd
         *          7: istore_3
         *          8: return
         */
    }
}
