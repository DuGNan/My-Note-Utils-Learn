单例模式小总结：

 一、什么是单例模式
  1、所谓类的单例设计模式，就是 采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，
  2、并且该类只提供一个取得其对象实例的方法(静态方法)。
  比如 Hibernate 的 SessionFactory，它充当数据存储源的代理，并负责创建 Session 对象。
  SessionFactory 并不是轻量级的，一般情况下，一个项目通常只需要一个 SessionFactory 就够，这是就会使用到单例模式。


 二、单例模式总工有8种写法：
   1、饿汉式 静态常量    (在不确定一定用到的时候会浪费内存,线程安全)    final static Singleton INSTANCE = new Singleton();
   2、饿汉式 静态代码块  (在不确定一定用到的时候会浪费内存,线程安全)    static {INSTANCE = new Singleton();}
   3、懒汉式 使用再创建  (线程不安全)              getInstance();
   4、懒汉式 同步方法    (线程安全了，效率低)       synchronized getInstance();
   5、懒汉式 同步代码块  (反而线程不安全了)         synchronized(){}
   6、懒汉式 双重检索    (线程安全)                volatile + 双if + 静态代码块
   7、静态内部类        1、利用JVM类加载器加载外部类时不加载静态内部类   2、利用JVM装载类去保证线程安全
   8、枚举             利用jdk1.5之后枚举类的特性


 三、推荐使用的有：
   在确保类一定会使用的时候，饿汉式两种可以使用。(1、2)
   双重检索、静态内部类、枚举 可以使用。(6、7、8)


 四、单例模式的经典使用：
   JDK中的 java.lang.Runtime就是单例模式。
   使用的是饿汉式写法。
   如下：
   private static Runtime currentRuntime = new Runtime();
   public static Runtime getRuntime() { return currentRuntime; }
   private Runtime() {}


 五、使用注意细节：
   1、单例模式保证了 系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能
   2、当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是使用 new
   3、单例模式的使用的场景：需要 频繁的进行创建和销毁的对象、创建对象时耗时过多或耗费资源过多
   (即：重量级对象)，但又经常用到的对象、工具类对象、频繁访问数据库或文件的对象(比如：数据源、session  工厂等)
